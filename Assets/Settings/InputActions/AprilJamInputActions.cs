//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputActions/AprilJamInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AprilJamInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AprilJamInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AprilJamInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""cb9c15de-dbd2-4b91-91e9-f0a1cde8df82"",
            ""actions"": [
                {
                    ""name"": ""Do"",
                    ""type"": ""Button"",
                    ""id"": ""e837e8ff-45b5-44b0-a545-73aab9129705"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Re"",
                    ""type"": ""Button"",
                    ""id"": ""333d2a23-80ac-42da-852b-233ccf917391"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mi"",
                    ""type"": ""Button"",
                    ""id"": ""1499164a-6681-404e-a10e-0d175e733c74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fa"",
                    ""type"": ""Button"",
                    ""id"": ""3f822828-ce4b-4db5-8488-f5320838c2e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sol"",
                    ""type"": ""Button"",
                    ""id"": ""de9c17b2-dfbf-453e-a72e-4401816b92ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""La"",
                    ""type"": ""Button"",
                    ""id"": ""9524dddd-45c8-4109-9c4c-cc38d6d4b718"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Si"",
                    ""type"": ""Button"",
                    ""id"": ""269ee351-01d9-476a-98ab-208468b5b17b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""239cd527-fa99-4a5b-80ae-c1c7a94571eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""084effe7-d071-462d-b3aa-fb029103d8be"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Do"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ee9b610-afdc-401d-bd59-0b03eeab3277"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Re"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5103f366-a2be-4f41-9412-5de34d5baf8a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""254b12ec-66db-4b5b-aecf-5622cb84f18c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fa"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcccd1e4-9caf-4f05-8bfc-afa694d86294"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4120621d-98ea-4c46-99c5-f3d2538946e8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""La"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3e56b1e-29d2-47d4-af12-2029690a0d4f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Si"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37066767-700a-4f2f-a52c-7eb361428453"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Do = m_Player.FindAction("Do", throwIfNotFound: true);
        m_Player_Re = m_Player.FindAction("Re", throwIfNotFound: true);
        m_Player_Mi = m_Player.FindAction("Mi", throwIfNotFound: true);
        m_Player_Fa = m_Player.FindAction("Fa", throwIfNotFound: true);
        m_Player_Sol = m_Player.FindAction("Sol", throwIfNotFound: true);
        m_Player_La = m_Player.FindAction("La", throwIfNotFound: true);
        m_Player_Si = m_Player.FindAction("Si", throwIfNotFound: true);
        m_Player_Confirm = m_Player.FindAction("Confirm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Do;
    private readonly InputAction m_Player_Re;
    private readonly InputAction m_Player_Mi;
    private readonly InputAction m_Player_Fa;
    private readonly InputAction m_Player_Sol;
    private readonly InputAction m_Player_La;
    private readonly InputAction m_Player_Si;
    private readonly InputAction m_Player_Confirm;
    public struct PlayerActions
    {
        private @AprilJamInputActions m_Wrapper;
        public PlayerActions(@AprilJamInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Do => m_Wrapper.m_Player_Do;
        public InputAction @Re => m_Wrapper.m_Player_Re;
        public InputAction @Mi => m_Wrapper.m_Player_Mi;
        public InputAction @Fa => m_Wrapper.m_Player_Fa;
        public InputAction @Sol => m_Wrapper.m_Player_Sol;
        public InputAction @La => m_Wrapper.m_Player_La;
        public InputAction @Si => m_Wrapper.m_Player_Si;
        public InputAction @Confirm => m_Wrapper.m_Player_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Do.started += instance.OnDo;
            @Do.performed += instance.OnDo;
            @Do.canceled += instance.OnDo;
            @Re.started += instance.OnRe;
            @Re.performed += instance.OnRe;
            @Re.canceled += instance.OnRe;
            @Mi.started += instance.OnMi;
            @Mi.performed += instance.OnMi;
            @Mi.canceled += instance.OnMi;
            @Fa.started += instance.OnFa;
            @Fa.performed += instance.OnFa;
            @Fa.canceled += instance.OnFa;
            @Sol.started += instance.OnSol;
            @Sol.performed += instance.OnSol;
            @Sol.canceled += instance.OnSol;
            @La.started += instance.OnLa;
            @La.performed += instance.OnLa;
            @La.canceled += instance.OnLa;
            @Si.started += instance.OnSi;
            @Si.performed += instance.OnSi;
            @Si.canceled += instance.OnSi;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Do.started -= instance.OnDo;
            @Do.performed -= instance.OnDo;
            @Do.canceled -= instance.OnDo;
            @Re.started -= instance.OnRe;
            @Re.performed -= instance.OnRe;
            @Re.canceled -= instance.OnRe;
            @Mi.started -= instance.OnMi;
            @Mi.performed -= instance.OnMi;
            @Mi.canceled -= instance.OnMi;
            @Fa.started -= instance.OnFa;
            @Fa.performed -= instance.OnFa;
            @Fa.canceled -= instance.OnFa;
            @Sol.started -= instance.OnSol;
            @Sol.performed -= instance.OnSol;
            @Sol.canceled -= instance.OnSol;
            @La.started -= instance.OnLa;
            @La.performed -= instance.OnLa;
            @La.canceled -= instance.OnLa;
            @Si.started -= instance.OnSi;
            @Si.performed -= instance.OnSi;
            @Si.canceled -= instance.OnSi;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnDo(InputAction.CallbackContext context);
        void OnRe(InputAction.CallbackContext context);
        void OnMi(InputAction.CallbackContext context);
        void OnFa(InputAction.CallbackContext context);
        void OnSol(InputAction.CallbackContext context);
        void OnLa(InputAction.CallbackContext context);
        void OnSi(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
    }
}
